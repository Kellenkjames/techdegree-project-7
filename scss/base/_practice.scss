// STAGE 1

/* Exercise 1: Defining a Grid 
Grid Tracks: The space between two adjacent grid lines (the columns and rows of the grid) 
Grid-Template-Columns: Sets the column tracks
Grid-Template-Rows: Sets the row tracks
Track size values can be: px, EM, REM, or even a CSS calc (function) - Look more into this
*/

/* Exercise 2: Setting Grid Rows */

/* Exercise 3: Add gutters between rows and columns */

.container {
    max-width: 800px;
    display: grid;
    grid-template-columns: 200px auto 200px; /* This sets the width of the column. Middle column is flexible while the first and last columns remain fixed */
    grid-template-rows: 100px 200px; /* This sets the height of the row */
    grid-gap: 20px;
}

// STAGE 2

/* Exercise 1: Introducing fr, a Flexible CSS Length Unit 
1fr represents 1 fraction of the available space in the grid container (flexible unit) - this value is calculated AFTER any non-flexible tracks have been accounted for AND Gutter values. 
*/

/* Exercise 2: Set Tracks with repeat() Notation
The CSS Grid repeat() function saves you time and helps keep your CSS maintainable. repeat() offers a shortcut for repeating patterns of tracks, which keeps you from having to write the same values over and over again.
*/

.container {
    max-width: 1000px;
    display: grid;
    grid-template-columns: repeat(3, 1fr); 
    grid-template-rows: 100px 200px; 
    grid-gap: 20px;
}

/* Exercise 3: Flexible Track sizing with minmax()
One of the most useful features in Grid Layout is the minmax() function. minmax() lets you set a grid track's minimum and maximum size.
*/

.container {
    max-width: 1000px;
    display: grid;
    grid-template-columns: repeat(3, minmax(200px, 1fr)); /* For minmax function this says: this column will not get any smaller than 200px AND if the available space allows it will expand and get it on the free space of the other 2 tacks */
    grid-template-rows: 100px 200px; 
    grid-gap: 20px;
}

/* Exercise 4: Repeat Tracks with auto-fill and auto-fit 
Grid layout lets you set items to automatically wrap and adjust to fit their container's width. This lets you create designs that respond to different browser widths. The Grid Layout repeat notation supports two keywords -- auto-fill and auto-fit -- to help with this.

What's the difference between the number value and auto-fill? Instead of forcing the browser to fit a specific number of columns inside the container, we are letting the browser figure how many columns can fit without overflow.

When you use auto-fit or auto-fill with px values - you LOSE your flexible columns

Auto-fill generates as many emtpy tracks as necessary to fill in the remaining space 
Auto-fit collpases any empty tracks down to zerp px - so grid items can expand to fill up empty space. 

THE MAGIC INGREDIENT IN RESPONSIVE GRID LAYOUT
*/

.container {
    max-width: 1000px;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); 
    grid-template-rows: 100px 200px; 
    grid-gap: 20px;
}

/* Exercise 5: Explicit vs Implicit Grids 
Implicit row tracks are anything defined outside of the grid. Implicit tracks are auto sized by default and based on the size of the "content" that they hold. 
*/

/* Exercise 6: Control the Auto-placement of Grid Items
Knowing why and how implicit grid tracks are created is important when working with grid layout. You might not always know exactly how many items will be in your grid container. What if you need to size or position implicit tracks a certain way? That could get tricky, because there could be any number of implicit tracks.

grid-auto-rows controls implicit row tracks
grid-auto-columns controls implicit column tracks

*/

.container {
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    grid-auto-rows: minmax(150px, auto);
}

// STAGE 3

/* Exercise 1: Using the GRID inspector tool within Firefox */

/* Exercise 2: Position Items by Grid Lines 

CSS Grid lets you exercise even greater control by specifying the placement of individual grid items. You can use grid line numbers to control how items are placed, by applying properties directly to a grid item. This gives you precise control over grid item placement, size and order.

Grid lines also have negative indexes. You can reference grid lines starting from the far right or bottom edges of the grid, using negative line numbers. In this video, you'll more line placement tips and a shorthand syntax for positioning items by line number.

*/

.container {
    display: grid;
    grid-template-columns: 2fr 1fr;
    grid-template-rows: 100px 350px 100px;
}

.header-test {
    grid-column: 1 / -1; /* As an example, this will mean it will fill up the entire row (ALWAYS) */
}

